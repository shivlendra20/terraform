pipeline {
    agent any

    
    
    tools {
        terraform 'terraform'
    }

    environment {
        AWS_DEFAULT_REGION= 'ap-south-1'
        aws_credentials_id = 'aws_credentials_id'
        repo_url = "https://github.com/shivlendra20/terraform.git"
    }

    stages {
        stage('Validate input params') {
            steps {
                script {
                    def service_name = "${env.service_name}"
                      if (service_name.length() >= 1 && service_name.length() <= 18) {
                         echo "service_name length is valid."
                    } else{
                            error("Service name length is not within the valid range.")
                    }
                }
            }
        }
        stage('Clean Workspace') {
            steps {
            cleanWs()
            }
        }
        stage('Clone repository') {
            steps {
                git credentialsId: 'GitHub',
                url: "${repo_url}"
            }
        }

        stage('Test AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh 'echo "AWS Access Key ID: $AWS_ACCESS_KEY_ID"'
                    sh 'echo "AWS Secret Access Key: $AWS_SECRET_ACCESS_KEY"'
                }
            }
        }        
        stage('Create tfvars file') {
            steps {
                
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "{aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) 
                {
                    sh """
                    cat > terraform.tfvars << EOF
                    environment_name  = "${env.environment}"
                    service_base_name = "${env.service_name}"
                    aws_access_key="${AWS_ACCESS_KEY_ID}"
                    aws_secret_key="${AWS_SECRET_ACCESS_KEY}"
                """
                }
            }
        }
    
        stage('Terraform init') {
            steps {
                
                    sh 'terraform init'
                    sh """
                        if terraform workspace new ${env.service_name}-${env.environment} 2>&1 | grep -q "already exists"; then
                            terraform workspace select ${env.service_name}-${env.environment}
                        else
                            terraform workspace new ${env.service_name}-${env.environment}
                        fi
                    """
            }
            
        }
        stage('Terraform validate') {
            steps {
                
                    sh 'terraform validate'
                
            }
        }
        stage('Terraform plan') {
            steps {
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "{aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                    terraform plan 
                    """
                    }
            }
        }    
        stage('Terraform Apply') {
            steps {
                    
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "{aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    sh """
                    terraform apply -auto-approve
                    """
                    }
            }
        }
    }
}    

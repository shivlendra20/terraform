pipeline {
    agent any

  

    environment {
        AWS_CREDENTIALS_ID = 'aws_credentials_id' // Jenkins credentials ID
        AWS_DEFAULT_REGION = 'ap-south-1'
    }
    
    stages {
   
        stage('Debug AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS_ID}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                    script {
                        echo "AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}"
                        echo "AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}"
                    }
                }
            }
        }
        stage('Validate input params') {
            steps {
                script {
                    def service_name = "${env.service_name}"
                      if (service_name.length() >= 1 && service_name.length() <= 18) {
                         echo "service_name length is valid."
                    } else{
                            error("Service name length is not within the valid range.")
                      }
                }
            }
        }
        stage('Clean Workspace') {
            steps {
            cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                git credentialsId: 'GitHub',
                    url: 'https://github.com/shivlendra20/terraform'
            }
        }

        stage('Terraform init') {
            steps {
                  sh 'terraform init'
                  sh "terraform workspace select ${env.service_name}-${env.environment}"
            }
        }
        stage('Terraform validate') {
            steps {
                  sh 'terraform validate'
            }
        }
        stage('Terraform plan') {
            steps {
                  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "{aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                  sh 'terraform plan '
                  }
            }
        }
        stage('Terraform Destroy') {
            steps {
                  withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "{aws_credentials_id}", accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
                      sh 'terraform destroy -auto-approve'
                }
            }
        }
    }
}